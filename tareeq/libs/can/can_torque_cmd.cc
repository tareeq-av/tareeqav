#include <iostream>
#include <chrono>
#include <thread>

#include "packer.h"
#include "parser.h"
#include "can_writer.h"
#include "toyota_can.h"
#include "can_message.h"
#include "toyota_corolla_2017.h"


int main(int argc, char** argv)
{

    size_t frame_id = 0;
    dbc_register(&tareeq::can::toyota_corolla_2017_pt_generated);

    std::unique_ptr<tareeq::can::CANPacker> packer = tareeq::can::GetPacker(std::string("toyota_corolla_2017_pt_generated"));
    std::unique_ptr<tareeq::can::CANParser> parser = tareeq::can::GetParser(std::string("toyota_corolla_2017_pt_generated"));
    std::unique_ptr<tareeq::can::CANWriter> writer = tareeq::can::GetWriter(std::string("can0"));
    
    tareeq::can::ToyotaCAN toyota(std::move(packer));

    // bool res;

    // https://github.com/ros/ros_comm/blob/noetic-devel/clients/rospy/src/rospy/timer.py#L47
    // long sleep_duration = 2e4/100; // 1e9/100Hz 
    long sleep_duration = 5000000000.0/100;

    std::vector<int> commands = {17, 17, 17, 17, 17, 17, 17, 20, 17, 17, 17, 17, 17, 17, 17, 20, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17,
    17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 20, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17,
    17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 20, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 20, 17, 17, 17, 17, 17,
    17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 20, 17, 17, 17, 17, 20, 20, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17,
    17, 17, 17, 17, 20, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17,
    17, 17, 17, 17, 20, 17, 17, 17, 17, 17, 17, 17, 20, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 14, 17,
    17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 14, 17, 17, 17, 17, 17, 17, 14, 17, 17, 17, 17, 17, 17, 17, 20, 26, 41, 58, 118, 143,
    157, 176, 196, 222, 232, 285, 258, 232, 232, 212, 183, 189, 186, 166, 163, 166, 150, 132, 139, 153, 143, 132, 136, 150, 143, 153, 157, 169, 180, 176, 186, 189, 160, 125, 71, -101,
    -126, -97, -56, -53, -38, -44, -56, -62, -68, -72, -76, -79, -79, -79, -79, -83, -83, -83, -83, -83, -83, -83, -83, -15, 17, 17, 20, 29, 41, 58, 78, 139, 160, 173, 183, 225, 228,
    265, 261, 242, 225, 261, 232, 242, 206, 192, 183, 169, 173, 166, 160, 169, 143, 157, 139, 150, 163, 150, 150, 163, 176, 136, 107, 55, -94, -137, -112, -68, -65, -44, -50, -56, -65,
    -68, -72, -76, -76, -79, -79, -83, -83, -83, -83, -83, -83, -15, 17, 17, 17, 17, 17, 20, 26, 35, 49, 71, 132, 160, 180, 206, 219, 248, 261, 289, 292, 271, 248, 245, 285, 222, 153,
    163, 157, 153, 129, 125, 143, 147, 153, 153, 173, 163, 150, 169, 169, 129, 85, -90, -140, -133, -76, -68, -47, -50, -56, -65, -68, -72, -76, -76, -79, -79, -79, -79, -83, -83, -83,
    -83, -21, 17, 17, 17, 17, 23, 37, 52, 75, 143, 166, 192, 212, 232, 271, 268, 301, 282, 248, 285, 342, 219, 160, 199, 129, 118, 114, 118, 139, 139, 147, 180, 169, 153, 216, 282, 189,
    85, -33, -137, -223, -197, -158, -101, -83, -59, -53, -62, -65, -72, -76, -76, -79, -79, -79, -83, -83, -83, -83, -83, -86, -83, -15, 17, 20, 20, 17, 20, 20, 23, 29, 43, 61, 129,
    150, 180, 199, 216, 228, 238, 258, 271, 278, 248, 261, 304, 258, 186, 157, 89, 64, 52, 35, 23, 11, 20, 35, 67, 118, 166, 176, 136, 129, 118, 85, -18, -119, -133, -112, -72, -59,
    -44, -53, -62, -68, -72, -76, -76, -79, -79, -79, -83, -83, -83, -83, -86, -83, -27, 17, 17, 17, 20, 17, 20, 26, 41, 78, 139, 176, 189, 199, 251, 285, 301, 275, 308, 387, 353, 297,
    176, 180, 160, 186, 163, 143, 82, 67, 67, 82, 100, 111, 121, 129, 143, 139, 147, 118, 52, -112, -200, -148, -97, -76, -53, -53, -62, -68, -72, -76, -79, -79, -79, -79, -83, -83,
    -83, -83, -83, -56, 0, 17, 17, 17, 17, 20, 29, 46, 89, 143, 180, 212, 245, 271, 285, 316, 316, 312, 425, 338, 285, 225, 139, 93, 26, 20, 37, 64, 100, 143, 160, 176, 319, 326, 323,
    55, -33, -112, -207, -207, -187, -130, -83, -72, -50, -56, -62, -65, -72, -72, -76, -76, -76, -79, -79, -83, -83, -83, -79, -79, -72, 0, 17, 20, 20, 23, 26, 37, 58, 114, 153, 189,
    219, 245, 289, 308, 304, 323, 450, 446, 350, 282, 143, 147, 136, 52, 32, 43, 71, 96, 132, 157, 258, 285, 209, 107, 0, -33, -86, -154, -239, -220, -161, -108, -94, -59, -53, -62,
    -68, -72, -72, -76, -79, -79, -79, -83, -83, -83, -83, -83, -83, -83, 0, 17, 17, 20, 20, 20, 35, 52, 121, 139, 186, 176, 216, 251, 268, 275, 282, 251, 261, 353, 410, 261, 89, 26,
    26, 14, 17, 52, 125, 202, 196, 176, 186, 64, 52, 20, -30, -210, -203, -161, -104, -86, -62, -47, -59, -65, -72, -76, -76, -79, -79, -83, -79, -79, -79, -79, -83, -79, -83, -79,
    -83, -18, 14, 17, 14, 14, 14, 17, 17, 14, 17, 14, 17, 17, 17, 17, 17, 17, 17, 14, 14, 17, 17, 17, 17, 14, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17,
    17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 20, 17, 17, 17, 17, 17, 20, 17, 20, 17, 17, 17, 17, 17, 17, 17, 20, 20, 17, 17, 17, 17, 17, 17, 20, 17, 20, 17, 17, 20,
    17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 20, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 20, 20, 17, 17, 17, 17, 17, 17, 20, 17, 17,
    20, 17, 17, 20, 17, 17, 20, 17, 17, 17, 17, 17, 17, 20, 17, 20, 17, 20, 17, 17, 17, 17, 17, 17, 17, 17, 20, 17, 17, 17, 17, 20, 17, 17, 17, 20, 17, 17, 17, 17, 17, 17, 17, 17, 17,
    17, 20, 20, 17, 17, 20, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 20, 17, 17, 17, 17, 17, 17, 20, 17, 20, 17, 17, 20, 17, 17, 17, 20, 17, 17, 17, 17, 20, 17, 20, 17,
    17, 17, 20, 20, 17, 17, 17, 17, 17, 20, 20, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 20, 17, 17, 17, 17, 17, 17, 20, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 20,
    17, 17, 17, 17, 17, 17, 17, 17, 20, 17, 20, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17};

    while (true)
    {

        for (auto &cmd : commands)
        {
            auto s = std::chrono::system_clock::now();
            auto start_time = s.time_since_epoch();
            
            frame_id++;
            toyota.new_steering_command_ = cmd;            
            tareeq::can::can_message steering_cmd = toyota.apply_steering_command(frame_id);
            writer->send(steering_cmd);
            
            auto e = std::chrono::system_clock::now();
            auto end_time = e.time_since_epoch();

            auto exec_time = end_time.count() - start_time.count();
            if (exec_time > sleep_duration)
            {
                continue;
            }
            else 
            {
                auto sleep_for = sleep_duration - exec_time;
                std::cout << "execution took " << exec_time << " so sleeping for " << sleep_for << " nano seconds" << std::endl;
                std::this_thread::sleep_for(std::chrono::nanoseconds(sleep_for));
            }
        }
    }

    return 0;

}
